/*
指针
变量地址：变量本质 内存中一块数据的标记，把值存储到变量中，实质是把值存到内存中
每次对变量重新赋值就是改变变量地址中的内容
&+变量名 获取变量地址值
重新创建一个非引用型变量也会开辟一个新的内存地址，即使把已有变量赋值给新变量也是如此
指针变量 指向一个内存空间
使用 var 变量名 *类型 声明指针类型变量
声明指针类型不会开辟新的内存地址,只是准备要指向内存某个空间，而声明变量会开辟内存地址，准备存放内容
所以指针类型变量都是把一个变量的地址赋值给指针变量
使用 *+指针能够获得内存地址中的值，*+指针和直接使用变量是相同的
应用指针可以实现多个地方操作同一个内存地址（在方法参数应用指针较多）
 */
package main

import (
	"fmt"
)

func main() {
	a := 1
	b := 2
	fmt.Println(&a,&b)
	b = a
	c := b
	fmt.Print(a,b,&a,&b,&c)

	m := &a
	fmt.Printf("%T\n",m)

	var ao *int//刚声明完的指针叫空指针nil,这里的*是指针类型的语法声明
	fmt.Println(ao)
	fmt.Println(ao == nil)

	x:=369
	y := &x
	fmt.Println(y,&x)

	*y = 365
	*&x = 666
	*y = 520
	fmt.Println(*y,x)
}
