/**
* @Author: S1m0n
* @Date: 19-7-4 下午10:14
继承
按照传统OPP思想，继承就是把同一类事物提出共同点为父类，让子类可以复用父类的可访问性内容

通过关键字继承，强耦合实现方式
组合式继承，松耦合继承方式
Java或C#中应少用继承而使用组合代替继承，可以使高內聚低耦合

Go语言中的继承通过组合实现

匿名属性，把结构体中的属性名称去掉，不允许出现同名的属性

结构体之间的关系
传统OOP中类与类之间的关系
1、继承：is-a，强耦合性，一般认为类与类之间具有强关系
2、实现：like-a，接口和实现类之间的关系
3、依赖：use-a，具有偶然性、临时性、非常弱的，但是B类的变化会影响到A，一般作为方法参数
4、关联：has-a，一种强依赖关系，比如我和我的朋友，这种关系依赖更强，不存在依赖关系的偶然性，关系也不是临时性的，
一般是长期性的，而且双方的关系一般是平等的，关联可以使单向的、双向的
5、聚合：has-a，整体与部分，拥有的关系
6、组合：contains-a，这种关系比聚合更强，也称为强聚合，同样体现整体与部分间的关系，但此时整体与部分是不可分的，
整体的生命周期结束也意味着部分的生命周期结束

组合>聚合>关联>依赖

关联、组合、聚合都是把当前结构体的一个全局属性，他们之间的区分是语义上的区分，代码上表现时一样，都是全局属性
聚合的整体部分可拆分
组合 人和大脑，整体没了，部分没了

Go语言中的使用匿名属性完成继承
把另一个结构体类型当作另一个结构体属性，可以直接调用另一个结构体中的内容
因为Go语言中结构体不能相互转换，所以不能把子结构体变量赋值给父结构体变量
 */
package main

/*
type People struct{
	string
	int
}

func main() {
	peo:=People{"张三",18}
	fmt.Println(peo)
	peo.string="里斯"
	peo.int=25
	fmt.Println(peo.string,peo.int)
}

//type People struct {
	name string
	age int
}

type Teacher struct {
	classroom string
	People //匿名属性 调用的时候不用打点.peo
}

func main() {
	tea:=Teacher{"302班级",People{"张三",28}}
	fmt.Println(tea.classroom,tea.name,tea.age)
}
*/
